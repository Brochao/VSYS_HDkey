package Example;
import org.whispersystems.curve25519.java.curve_sigs;

import systems.v.hdkey.ExtendedKey;
import systems.v.hdkey.HDkeyException;


public class Test {
	
	public static void main(String[] args) throws HDkeyException {
		
		//  steps to use 
		
		//  a seed for each wallet, take 32 bytes for example
		byte[] seed = {0x7a, (byte)0xd1, (byte)0xdf, 0x7c, 0x25, 0x13, (byte)0xa5, (byte)0xbe, (byte)0xfe, 0x3e, 0x65, 0x2d, (byte)0xcd, 0x1b, 0x67, (byte)0xe2, 0x48, 0x40, 0x3c, 0x22, (byte)0xd4, (byte)0xc1, 0x55, 0x0e, 0x17, 0x1d, (byte)0xf4, 0x6c, (byte)0xea, (byte)0xa3, (byte)0x91, 0x35};
		// path to derived keys , take  m/66'/33'/1'/3/0  for example
		// m/ refer to root key
		// ' means hardended derived
		String path = "m/66'/33'/1'/3/0";
		
		// 1.  to derived key at path  m/66'/33'/1'/3/0 , the parent public key shoud be derived first,
		//     which means the public key at path m/66'/33'/1'/3 .
		
		String parentPath = "m/66'/33'/1'/3";
		String parentPub = ExtendedKey.generateParentPublicKey(seed, parentPath);
		System.out.println("--------public key information at path m/66'/33'/1'/3--------");
		System.out.println(parentPub);
		
		// 2.   The information of parent public key is encoded with base58, 
		//      when generate new addresses, only parentPub is needed, 
		//      the wallet only need to save parentPub's information and the path generated it.
		
		// 3.   generate public key at m/66'/33'/1'/3/0,
		//      which is the first child key of parentPub
		
		byte[] childPub_0 = ExtendedKey.generateChildPublicKeyBytes(parentPub, 0);
		System.out.println("--------child public key at path m/66'/33'/1'/3/0--------");
		System.out.println(bytes2hex(childPub_0));
		
		// 4. There's no need to use seed or any private keys to generate a new address,
		//    only when spending VSYS coins , the seed and the corresponding path is needed to get the private key
		//    the absolute path of publicKey_0 is m/66'/33'/1'/3/0
		byte[] childPri_0 =  ExtendedKey.generatePrivateKey(seed, path);
		System.out.println("--------child private key at path m/66'/33'/1'/3/0--------");
		System.out.println(bytes2hex(childPri_0));
		
		// 5. check if publicKey_0 and childPri_0 are in pair
		System.out.println("--------result check--------");
		byte[] checkPub_0 = new byte[32];
		curve_sigs.curve25519_keygen(checkPub_0, childPri_0);
		System.out.println("VSYS public key point generated from Hardened Derive:      " + bytes2hex(childPub_0));
		System.out.println("VSYS public key point generated from private key:          " + bytes2hex(checkPub_0));
		if(!bytes2hex(childPub_0).equals(bytes2hex(checkPub_0)))
			throw new HDkeyException("generate failed!");
		
		
		// 6. Tons of public key points can be generated by changing the value of index,
		System.out.println("--------VSYS public key points from index 1 to index 999--------");
		for (int index = 1; index < 1000; index++) 
		{
			System.out.println("-------- index: " + index + "--------");
			byte[] childPub = ExtendedKey.generateChildPublicKeyBytes(parentPub, index);
			System.out.println("public key point at m/66'/33'/1'/3/" + index + " is:            " + bytes2hex(childPub));
			byte[] childPri =  ExtendedKey.generatePrivateKey(seed, parentPath + "/" + index);
			byte[] checkPub = new byte[32];
			curve_sigs.curve25519_keygen(checkPub, childPri);
			System.out.println("VSYS public key point generated from private key is:  " + bytes2hex(checkPub));
			if(!bytes2hex(childPub).equals(bytes2hex(checkPub)))
				throw new HDkeyException("generate failed!");
		}
	}
	
	
	
	
	
    private static String bytes2hex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        String tmp = null;
        for (byte b : bytes) {
            tmp = Integer.toHexString(0xFF & b);
            if (tmp.length() == 1) {     
                tmp = "0" + tmp;
            }
            sb.append(tmp);
        }
        return sb.toString();

    }
}
